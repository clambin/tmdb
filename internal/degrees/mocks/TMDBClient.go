// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tmdb "github.com/clambin/tmdb/pkg/tmdb"
)

// TMDBClient is an autogenerated mock type for the TMDBClient type
type TMDBClient struct {
	mock.Mock
}

type TMDBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TMDBClient) EXPECT() *TMDBClient_Expecter {
	return &TMDBClient_Expecter{mock: &_m.Mock}
}

// GetMovieCredits provides a mock function with given fields: ctx, id
func (_m *TMDBClient) GetMovieCredits(ctx context.Context, id int) (tmdb.MovieCredits, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMovieCredits")
	}

	var r0 tmdb.MovieCredits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (tmdb.MovieCredits, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) tmdb.MovieCredits); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(tmdb.MovieCredits)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TMDBClient_GetMovieCredits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMovieCredits'
type TMDBClient_GetMovieCredits_Call struct {
	*mock.Call
}

// GetMovieCredits is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *TMDBClient_Expecter) GetMovieCredits(ctx interface{}, id interface{}) *TMDBClient_GetMovieCredits_Call {
	return &TMDBClient_GetMovieCredits_Call{Call: _e.mock.On("GetMovieCredits", ctx, id)}
}

func (_c *TMDBClient_GetMovieCredits_Call) Run(run func(ctx context.Context, id int)) *TMDBClient_GetMovieCredits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TMDBClient_GetMovieCredits_Call) Return(_a0 tmdb.MovieCredits, _a1 error) *TMDBClient_GetMovieCredits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TMDBClient_GetMovieCredits_Call) RunAndReturn(run func(context.Context, int) (tmdb.MovieCredits, error)) *TMDBClient_GetMovieCredits_Call {
	_c.Call.Return(run)
	return _c
}

// GetPerson provides a mock function with given fields: ctx, id
func (_m *TMDBClient) GetPerson(ctx context.Context, id int) (tmdb.Person, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPerson")
	}

	var r0 tmdb.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (tmdb.Person, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) tmdb.Person); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(tmdb.Person)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TMDBClient_GetPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPerson'
type TMDBClient_GetPerson_Call struct {
	*mock.Call
}

// GetPerson is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *TMDBClient_Expecter) GetPerson(ctx interface{}, id interface{}) *TMDBClient_GetPerson_Call {
	return &TMDBClient_GetPerson_Call{Call: _e.mock.On("GetPerson", ctx, id)}
}

func (_c *TMDBClient_GetPerson_Call) Run(run func(ctx context.Context, id int)) *TMDBClient_GetPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TMDBClient_GetPerson_Call) Return(_a0 tmdb.Person, _a1 error) *TMDBClient_GetPerson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TMDBClient_GetPerson_Call) RunAndReturn(run func(context.Context, int) (tmdb.Person, error)) *TMDBClient_GetPerson_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonCredits provides a mock function with given fields: ctx, id
func (_m *TMDBClient) GetPersonCredits(ctx context.Context, id int) (tmdb.PersonCredits, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonCredits")
	}

	var r0 tmdb.PersonCredits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (tmdb.PersonCredits, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) tmdb.PersonCredits); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(tmdb.PersonCredits)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TMDBClient_GetPersonCredits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonCredits'
type TMDBClient_GetPersonCredits_Call struct {
	*mock.Call
}

// GetPersonCredits is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *TMDBClient_Expecter) GetPersonCredits(ctx interface{}, id interface{}) *TMDBClient_GetPersonCredits_Call {
	return &TMDBClient_GetPersonCredits_Call{Call: _e.mock.On("GetPersonCredits", ctx, id)}
}

func (_c *TMDBClient_GetPersonCredits_Call) Run(run func(ctx context.Context, id int)) *TMDBClient_GetPersonCredits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TMDBClient_GetPersonCredits_Call) Return(_a0 tmdb.PersonCredits, _a1 error) *TMDBClient_GetPersonCredits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TMDBClient_GetPersonCredits_Call) RunAndReturn(run func(context.Context, int) (tmdb.PersonCredits, error)) *TMDBClient_GetPersonCredits_Call {
	_c.Call.Return(run)
	return _c
}

// GetTVSeriesCredits provides a mock function with given fields: ctx, id
func (_m *TMDBClient) GetTVSeriesCredits(ctx context.Context, id int) (tmdb.TVSeriesCredits, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTVSeriesCredits")
	}

	var r0 tmdb.TVSeriesCredits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (tmdb.TVSeriesCredits, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) tmdb.TVSeriesCredits); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(tmdb.TVSeriesCredits)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TMDBClient_GetTVSeriesCredits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTVSeriesCredits'
type TMDBClient_GetTVSeriesCredits_Call struct {
	*mock.Call
}

// GetTVSeriesCredits is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *TMDBClient_Expecter) GetTVSeriesCredits(ctx interface{}, id interface{}) *TMDBClient_GetTVSeriesCredits_Call {
	return &TMDBClient_GetTVSeriesCredits_Call{Call: _e.mock.On("GetTVSeriesCredits", ctx, id)}
}

func (_c *TMDBClient_GetTVSeriesCredits_Call) Run(run func(ctx context.Context, id int)) *TMDBClient_GetTVSeriesCredits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TMDBClient_GetTVSeriesCredits_Call) Return(_a0 tmdb.TVSeriesCredits, _a1 error) *TMDBClient_GetTVSeriesCredits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TMDBClient_GetTVSeriesCredits_Call) RunAndReturn(run func(context.Context, int) (tmdb.TVSeriesCredits, error)) *TMDBClient_GetTVSeriesCredits_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPersonAllPages provides a mock function with given fields: ctx, query
func (_m *TMDBClient) SearchPersonAllPages(ctx context.Context, query string) ([]tmdb.Person, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for SearchPersonAllPages")
	}

	var r0 []tmdb.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]tmdb.Person, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []tmdb.Person); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tmdb.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TMDBClient_SearchPersonAllPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPersonAllPages'
type TMDBClient_SearchPersonAllPages_Call struct {
	*mock.Call
}

// SearchPersonAllPages is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *TMDBClient_Expecter) SearchPersonAllPages(ctx interface{}, query interface{}) *TMDBClient_SearchPersonAllPages_Call {
	return &TMDBClient_SearchPersonAllPages_Call{Call: _e.mock.On("SearchPersonAllPages", ctx, query)}
}

func (_c *TMDBClient_SearchPersonAllPages_Call) Run(run func(ctx context.Context, query string)) *TMDBClient_SearchPersonAllPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TMDBClient_SearchPersonAllPages_Call) Return(_a0 []tmdb.Person, _a1 error) *TMDBClient_SearchPersonAllPages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TMDBClient_SearchPersonAllPages_Call) RunAndReturn(run func(context.Context, string) ([]tmdb.Person, error)) *TMDBClient_SearchPersonAllPages_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPersonPage provides a mock function with given fields: ctx, query, page
func (_m *TMDBClient) SearchPersonPage(ctx context.Context, query string, page int) ([]tmdb.Person, int, error) {
	ret := _m.Called(ctx, query, page)

	if len(ret) == 0 {
		panic("no return value specified for SearchPersonPage")
	}

	var r0 []tmdb.Person
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]tmdb.Person, int, error)); ok {
		return rf(ctx, query, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []tmdb.Person); ok {
		r0 = rf(ctx, query, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tmdb.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) int); ok {
		r1 = rf(ctx, query, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int) error); ok {
		r2 = rf(ctx, query, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TMDBClient_SearchPersonPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPersonPage'
type TMDBClient_SearchPersonPage_Call struct {
	*mock.Call
}

// SearchPersonPage is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - page int
func (_e *TMDBClient_Expecter) SearchPersonPage(ctx interface{}, query interface{}, page interface{}) *TMDBClient_SearchPersonPage_Call {
	return &TMDBClient_SearchPersonPage_Call{Call: _e.mock.On("SearchPersonPage", ctx, query, page)}
}

func (_c *TMDBClient_SearchPersonPage_Call) Run(run func(ctx context.Context, query string, page int)) *TMDBClient_SearchPersonPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *TMDBClient_SearchPersonPage_Call) Return(_a0 []tmdb.Person, _a1 int, _a2 error) *TMDBClient_SearchPersonPage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TMDBClient_SearchPersonPage_Call) RunAndReturn(run func(context.Context, string, int) ([]tmdb.Person, int, error)) *TMDBClient_SearchPersonPage_Call {
	_c.Call.Return(run)
	return _c
}

// NewTMDBClient creates a new instance of TMDBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTMDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TMDBClient {
	mock := &TMDBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
